from source.IO.dataset_import.DataImport import DataImport
from source.IO.dataset_import.DatasetImportParams import DatasetImportParams
from source.data_model.dataset.RepertoireDataset import RepertoireDataset
from source.util.ImportHelper import ImportHelper


class OLGAImport(DataImport):
    """
    Imports data generated by OLGA simulations into a RepertoireDataset. Assumes one file per repertoire
    and that each file includes a header with column names.

    Specification:

    .. indent with spaces
    .. code-block:: yaml

        my_olga_dataset:
            format: OLGA
            params:
                # required parameters:
                metadata_file: path/to/metadata.csv
                path: path/to/repertoire/files/
                result_path: path/where/to/store/immuneML/imported/data/
                # these parameters need to be specified only if different than default behaviour is desired
                import_productive: None # no effect as this info is not available in files created by OLGA
                import_with_stop_codon: None # no effect as this info is not available in files created by OLGA
                import_out_of_frame: None # no effect as this info is not available in files created by OLGA
                separator: "\\t"
                columns_to_load: ["sequences", "sequence_aas", "v_genes", "j_genes"] # column names correspond to OLGA output that will be loaded from the file
                column_mapping: None # could be defined if necessary in to format {column_name_in_original_file_1: immuneML_friendly_name_1 for all columns that should be mapped}

    """

    @staticmethod
    def import_dataset(params: dict, dataset_name: str) -> RepertoireDataset:
        olga_params = DatasetImportParams.build_object(**params)
        return ImportHelper.import_repertoire_dataset(OLGAImport.preprocess_repertoire, olga_params)

    @staticmethod
    def preprocess_repertoire(metadata: dict, params: DatasetImportParams):
        df = ImportHelper.load_repertoire_as_dataframe(metadata, params)

        if "sequences" not in df.columns and "sequence_aas" not in df.columns:
            raise IOError("OLGAImport: Columns should contain at least 'sequences' or 'sequence_aas'.")

        if "counts" not in df.columns:
            df["counts"] = 1

        df["sequence_identifiers"] = None

        return df

